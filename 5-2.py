# -*- coding: utf-8 -*-
"""
Created on Wed Sep 27 01:37:58 2023

@author: USER
"""
"""
基地台位址選擇
n = 城鎮數
p = 基地台數
d = 基地台覆蓋距離
"""
# 輸入n, p, d
npd = list(map(int, input().split())) 
# npd = [8, 3, 3]

# 城鎮座標與人口數
towns = [['x', 'y', 'p']]
for town in range(1,npd[0]+1):
    towns.append(list(map(int, input().split())))
"""
towns = [['x', 'y', 'p'],
        [ 3, -2, 10],
        [-1, 1, 15],
        [-1, 4, 10],
        [ 3, 2, 20],
        [ 4, 3, 20],
        [-3, -4, 25],
        [ 2, -3, 15],
        [ 0, 2, 10]]
"""

ptown = []                        # 最大覆蓋人數的城鎮
maxP = sumP = ttlP =0             # 覆蓋人數

# 計算各城鎮距離是否小於3
for i in range(npd[1]):                 # 基地台數量
    for j in range(1,len(towns)):       # 基準城鎮
        cLoc = []                       # 清除覆蓋城鎮
        cLoc.append(j)                  # 加入基準城鎮
        sumP = towns[j][2]              # 基準城鎮人數
        for k in range(1,len(towns)):   # 相對城鎮
            # 距離公式 dis = ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)
            dis = round(((towns[j][0] - towns[k][0])**2 + (towns[j][1] - towns[k][1])**2)**(1/2),2)
            if dis <= npd[2] and dis > 0: # 距離>0, 小於3
                cLoc.append(k)          # 加入覆蓋城鎮清單
                sumP += towns[k][2]     # 加總覆蓋人數

    # 評估是否在基準城鎮建立基地台
        if sumP > maxP:
            maxP = sumP
            ptown = cLoc.copy()
    print(ptown[0], end=' ')
    
    # 不重覆計算覆蓋人員，歸零覆蓋清單人數
    for l in ptown:                     
        towns[l][2] = 0
    ttlP += maxP
    maxP = 0
    # print(i,'-', j, cLoc, sumP)
print(ttlP)

    # print('town', i, x1, y1, x2, y2)
"""
Q1
20 3 30
40 17 18
-16 -20 38
-3 27 17
30 -19 38
-71 78 24
-68 -36 17
-66 -21 29
25 10 24
5 -56 17
-39 77 29
50 -30 28
51 -74 16
-33 26 34
-21 -20 12
39 -5 37
-26 10 27
51 -13 14
32 9 37
-14 -78 21
-77 0 40

15 7 16 360

Q2
10 3 30
54 40 34
62 -31 27
-37 41 36
24 22 19
10 -2 38
-53 -7 15
-56 -2 35
17 -28 16
-76 -13 12
-31 -27 19

6 5 3 190

Q3
20 3 10
-69 69 19
30 -39 13
-20 62 12
-3 -58 34
16 -43 24
61 -6 20
-45 39 22
66 73 22
-12 63 17
8 67 27
54 -50 16
-24 -19 19
58 -6 32
-38 -69 38
3 -79 22
-2 -54 36
-34 -73 30
6 -27 23
58 65 23
30 4 27

4 14 6 190

Q4
16 4 10
-49 -62 36
-78 -68 35
64 78 38
54 17 21
27 -22 34
-76 44 12
27 -29 18
-29 40 16
-26 10 12
46 69 24
-76 -67 16
80 35 32
-54 -11 14
-68 -70 18
73 44 38
-80 14 24

11 5 3 15 197

Q5
70 3 60
23 -80 35
15 -61 34
-75 41 30
11 -38 25
-70 -75 26
37 46 13
-28 70 25
34 61 15
-75 -12 27
-2 35 35
-76 7 23
-74 -15 37
58 53 34
42 79 12
-77 -25 10
10 50 40
26 -51 22
14 23 13
75 2 10
45 51 31
21 28 31
61 37 14
-74 30 24
-59 -44 33
47 -16 33
-2 37 38
-55 -6 25
-27 80 24
31 -19 26
-1 55 21
6 -28 13
70 73 19
0 78 31
7 14 30
-50 -64 13
-40 74 23
47 69 30
-16 -1 22
29 -4 23
-57 -16 19
39 9 28
-53 -9 18
-35 23 35
77 23 17
-61 71 22
-3 -56 19
24 6 30
-14 -11 35
64 -34 20
-20 43 23
-16 11 13
-73 45 11
10 -12 30
-58 -52 36
-25 -61 15
78 -75 27
-66 51 34
34 54 23
34 -40 11
3 33 35
-73 75 31
63 -14 12
-25 77 15
-49 -64 20
3 -76 38
73 -30 28
-62 -75 28
67 -72 23
6 22 24
-30 74 21

"""